@use 'sass:map';
@use 'variables' as *;

// ===================================
// COMPONENTS & UTILITIES
// ===================================
// Buttons + Content Components + Utilities

// ===================================
// BUTTONS
// ===================================

button,
.button-like {
  padding: map.get($spacing, xs) map.get($spacing, sm);
  border: $border-width solid map.get($colors, links);
  border-radius: map.get($spacing, xs);
  background: map.get($colors, links);
  color: map.get($colors, bg);
  font-size: $font-base;
  font-family: inherit;
  text-align: inherit;
  box-shadow: none;
  cursor: pointer;
  text-decoration: none;
  width: fit-content;
  display: inline-block;
  height: fit-content;

  &:hover,
  &:focus-visible {
    background: map.get($colors, links-subtle);
  }

  &.secondary {
    background: map.get($colors, bg);
    color: map.get($colors, text-subtle);
    border: $border-width solid map.get($colors, text-subtle);

    &:hover,
    &:focus-visible {
      background: map.get($colors, bg-more-translucent);
    }
  }
}

.invert {
  background: map.get($colors, bg);
  color: map.get($colors, text);
  border: $border-width solid map.get($colors, text-subtle);

  &:hover,
  &:focus-visible {
    background: map.get($colors, text-subtle);
    color: map.get($colors, bg);
  }
}

.buttons-wrapper {
  display: flex;
  flex-direction: row;
  gap: map.get($spacing, sm);
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;

  &:has(.button-like) {
     gap: map.get($spacing, md);
  }
}

// ===================================
// CONTENT COMPONENTS
// ===================================

.pop {
  padding: map.get($spacing, md) map.get($spacing, md) calc(map.get($spacing, md) * $perfect-fourth) map.get($spacing, md);
  background: map.get($colors, bg);
  border-radius: map.get($spacing, xs);
  border: $border-width solid map.get($colors, text-subtle);
  border-radius: map.get($spacing, xs);

  h2 {
    margin-bottom: map.get($spacing, sm);
  }
}

.projects-showcase {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: flex-start;
  flex-wrap: wrap;
  column-gap: map.get($spacing, xl);
  row-gap: map.get($spacing, 2xl);

  img {
    background: map.get($colors, bg);
    border: $border-width solid map.get($colors, text-subtle);
    border-radius: map.get($spacing, xs);
  }

  >* {
    flex: 1 1 calc(50% - (map.get($spacing, xl) / 2));
  }

  @media only screen and (max-width: map.get($breakpoints, md)) {
    >* {
      flex: 1 1 40%;
    }
  }

  @media only screen and (max-width: map.get($breakpoints, sm)) {
    gap: map.get($spacing, md);

    >* {
      flex: 1 1 100%;
    }
  }
}

.work {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  gap: map.get($spacing, sm);
  flex-wrap: wrap;

  .role {
    color: map.get($colors, text-subtle);
  }

  figure figcaption {
    font-weight: 500;
    font-size: revert;
  }
}

.image-scroll {
  overscroll-behavior-x: contain;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: flex-start;
  align-items: flex-start;
  gap: map.get($spacing, sm);
  overflow-x: auto;
  overflow-y: hidden;
  width: 100%;
  scrollbar-width: thin;
  scrollbar-color: map.get($colors, text-subtle) transparent;

  &::-webkit-scrollbar {
    height: $unit;
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background: map.get($colors, text-subtle);
  }

  picture {
    flex: 0 0 auto;
    display: inline-block;
  }

  img {
    aspect-ratio: auto;
    object-fit: contain;
    user-select: none;
    -webkit-user-drag: none;
    display: inline-block;
    flex: 0 0 auto;
    width: auto;
    height: calc(map.get($spacing, 2xl) * 4);
    border: $border-width solid map.get($colors, text-subtle);
    border-radius: map.get($spacing, xs);
    opacity: 1;
  }

  @media only screen and (max-width: map.get($breakpoints, md)) {
    img {
      height: calc(map.get($spacing, 2xl) * 2.5);
    }
  }

  @media only screen and (max-width: map.get($breakpoints, sm)) {
    img {
      height: calc(map.get($spacing, 2xl) * 2);
    }
  }
}

.playground {
  column-gap: map.get($spacing, lg);
  margin-bottom: map.get($spacing, xl);
  flex-direction: column;


  h3 {
    margin-bottom: 0;
  }

  >div:first-of-type {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: baseline;
    gap: map.get($spacing, xs);
    margin-bottom: map.get($spacing, sm);

    h3 {
      margin-right: auto;
      padding-right: map.get($spacing, lg);
    }
  }
}

.whatyouget {

  h2,
  div {
    margin-bottom: map.get($spacing, lg);
  }

  div:last-of-type {
    margin-bottom: 0;
  }

  h3 {
    margin-bottom: map.get($spacing, sm);
    color: map.get($colors, text-subtle);
  }
}

.quote {
  @include flex;
  width: 100%;
  justify-content: space-between;
  align-items: stretch;

  @media only screen and (max-width: map.get($breakpoints, sm)) {
    padding: map.get($spacing, md);
  }

  >div {
    @include flex(row, map.get($spacing, md));

    .credit {
      @include flex(column, map.get($spacing, xs));
      flex: 1 1 100%;
      justify-content: flex-start;
      align-content: start;
      flex-wrap: nowrap;

      p {
        margin: 0;
      }
    }
  }
}

.faqs {
  h2 {
    color: map.get($colors, text-more-subtle);
  }

  ul li {
    display: revert;

    &:not(:last-child) {
      padding-bottom: map.get($spacing, sm);
    }
  }
}

// Responsive Components
@media only screen and (max-width: map.get($breakpoints, sm)) {
  .ext-link+p {
    max-width: 95%;
  }
}

// ===================================
// UTILITIES
// ===================================

.invert-bg{
  background: map.get($colors, text);
  h2, p {
    color: map.get($colors, bg);
  }

  a.button-like {
    border: $border-width solid map.get($colors, bg);
  }

  &.green {
    background: map.get($colors, links);
  }
}

.cap-width {
  max-width: $container-width;
}

.cap-width-sm {
  max-width: calc($container-width / $golden-ratio);
}


.hidden {
  display: none;
}

.light {
  color: map.get($colors, text-more-subtle);
}

ul.plain-list {
  display: flex;
  flex-direction: column;
  width: 100%;
  justify-content: flex-start;
  align-content: start;
  flex-wrap: nowrap;
  gap: map.get($spacing, xs);
  margin-left: 0;
  color: map.get($colors, text-subtle);
  list-style: none;
}

ul.services-list {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-content: start;
  flex-wrap: nowrap;
  gap: map.get($spacing, sm);
  margin-left: 0;
  list-style: none;
}

.side-by-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(260px, 100%), 1fr));
  gap: map.get($spacing, md);

  >div {
    padding: map.get($spacing, md);
    border: $border-width solid map.get($colors, text-subtle);
    border-radius: map.get($spacing, xs);
    background: map.get($colors, bg);
    @include flex(column, map.get($spacing, xs));
    justify-content: space-between;
    align-items: flex-start;
    width: 100%;
  }
}

.simple-sb-flex {
  @include flex(row, map.get($spacing, lg));
  justify-content: space-between;
  align-items: center;
  width: 100%;
  flex-wrap: wrap;

  * {
    margin-bottom: map.get($spacing, md);
  }
}

.pricing-grid {
  display: grid;
  gap: map.get($spacing, xs);
}

.pricing-row {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: map.get($spacing, md);
  padding: map.get($spacing, sm);
  border-bottom: $border-width dashed map.get($colors, text-more-subtle);
  align-items: center;

  &.pricing-header {
    font-weight: bold;
    border-bottom: $border-width solid map.get($colors, text-more-subtle);
    grid-template-columns: 1fr 1fr;
  }

  span:last-child {
    text-align: right;
  }
}

.modal {
  display: none;
  position: fixed;
  z-index: 999;
  inset: 0;
  background: rgba(0, 0, 0, 0.5);
  align-items: center;
  justify-content: center;
  padding-inline: map.get($spacing, sm);

  &>div {
    @include flex(column, map.get($spacing, sm));
    justify-content: center;
    align-items: center;
    padding: map.get($spacing, md);
    background: map.get($colors, bg);
    border: $border-width dotted map.get($colors, text);
    border-radius: map.get($spacing, sm);
    text-align: center;
    max-width: calc($container-width / 1.618);

    p {
      margin: 0;
      color: map.get($colors, text-subtle);
    }

    p:last-of-type {
      margin-bottom: map.get($spacing, md);
    }
  }
}

.give-border {
  border: $border-width solid map.get($colors, text-subtle);
  border-radius: map.get($spacing, xs);
}

.selected-work-card {
  background: map.get($colors, bg);
  h2 {
    width: fit-content;
    padding: map.get($spacing, md) map.get($spacing, md) 0 map.get($spacing, md);
    max-width: 100%;
  }

  a {
    text-decoration: none;
  }

  &:hover {
    background: map.get($colors, links);
    h2 {
      color: map.get($colors, bg);
    }
    .light {
      color: map.get($colors, bg-more-translucent);
    }
  }
}